RubyConf 2013 - Unleash the Secrets of the Standard Library with SimpleDelegator, Forwardable, and more - Jim Gay

JIM GAY: Thanks for coming. I'm gonna be talking

about what we have in the standard library of Ruby,

and what I found as I was learning Ruby

is that there was a lot there that I didn't know about,

and I was doing Ruby professionally for awhile

before I even discovered some of these things.

So, when I pitched this proposal for RubyConf, I

said that I was gonna be talking about this

stuff for beginners to intermediates, so I'm curious how

many people here consider themselves beginner/intermediate Ruby developers. A

decent number. And some liars.

But, also what I found was there are a

lot of experienced developers who don't know about these

libraries, as well, and some of the tricks that

are inside them. So what I'm gonna be doing

is walking through, talking about what the libraries do,

talking about the concepts inside them, showing some of

the tricks of the code that they do, and

hopefully - what I want you to be able

to do is look at them, learn from them,

try them out. Try building some things on your

own and not just going to look through RubyGems

for solving some problem that you might have.

So I encourage you to, if you like, open

up your laptops and clone Ruby, or just look

at it on GitHub and, and, walk through some

of this stuff with me.

So I'm Jim Gay. I'm @saturnflyer on Twitter, on

BitBucket and GitHub and GitTorious, which you should check

out as well.

So one of the things that, as I was

learning programming in general, I would hear about the

standard library of Ruby versus the standard library of

another programming language, and I think there's two concepts

here that, you know, there's the standard things that

are in an array, for example, and that's your

standard library - or hash, and all the stuff

that you can do with those things.

But then there's also the extras that come along

with it, and what I'm gonna be talking about

is the extras, right. I, at a certain point,

I, I realized, I needed to get to know

Ruby better so I decided to look at the

code. And not knowing C, I saw this and

- ahh! my eyes! What is that?

Yeah, I look at that, and I had no

idea what it was. And this is actually the

marshalling code. But, so I would put it aside

and decide, well, I have to learn some C

before I can really get to know Ruby. Or,

you could, you could, Pat Shaughnessy's Ruby Under a

Microscope, which is a fantastic resource for learning how

this stuff works.

But what I was shocked to find was this.

You know, I was learning about gems and how

to properly build gems, and you have your Rails

apps and they have this lib directory. And I

looked in the Ruby source and I saw this

lib folder there, and I couldn't believe it. Like,

wow, there's a, there's a lib folder. And I

opened it up and it was just plain old

Ruby code. There was no C in sight.

So I want to encourage everyone here to just

go and look through there. There's all kinds of

fascinating things in there. Useful things that you don't

have to go out to RubyGems and, you know,

rely on Bundler to pull it in and figure

out dependencies and all that. It might just be,

the tool that you need might be right there.

So the first library I want to talk about

is delegate. And if you're using Rubinius, you have

to install, what is it, what is the name

of the gem?

AUDIENCE: RubySL.

J.G.: RubySL, that has the standard library and it's

all gems, right. If you have MRI it's just

right there in the lib directory. So this is

all you have to do to get this library

available. You don't have to add it to your

gem file and do bundle install and, and all

that stuff. It's right there.

So when I think about how code works, I

try to visualize it. So I'm gonna walk you

through that a little bit and then we'll get

into some code.

I forgot to start my timer. We'll be an

extra few minutes.

So let's say we have this user object, right.

It has some information on it, and we can

send a message to it. Tell me user, when,

when were you born? And I get back this

date object, right.

But in my program, maybe I don't really want

all of that stuff. I just want to display

the year. I ask you when you're born. You

say, oh well, this is, this is it. And

I don't necessarily want to go and change that

born method that handles the message that I sent

to it. I'm only using this in a particular

place. Maybe in a presenter or some sort of

display area. So this is what you can do

with the delegate library.

You can wrap it in this decorator and it's

the decorator's responsibility to handle this message. So you

send the same message and this object is acting

as if it is the user, right. You're just

kind of pretending, for now you just be the

user but you'll have some extra behavior. So, internally

what it does is it says, user, when were

you born? I'm gonna translate that and give me

the year and that's actually what we want to

say, right.

So delegate library gives you these three things. Delegator,

SimpleDelegator, and DelegateClass(). I'll walk through them. And I

thought it would be interesting to try to implement

this stuff, the bare bones of, of these libraries,

into something that fit into a Tweet. So this

is the smallest implementation I could do for the

delegator library.

So if you want to Tweet that real quick.

That's enough time.

So I'll expand it for you. This is, this

is what it's doing. Let's say we called it

Delegator. You initialize with an object and you store

a reference to it. And then you use method_missing.

Any messages it doesn't understand it will send to

that object.

So if you're not familiar with method_missing, it is

so awesome when you learn it and then you

start using it and realize what a mess you've

made. But it's still good to know. And this

is how delegate library works.

When you send a message to this delegator, it's

gonna initialize this Delegator class. You send a message

to it. If it doesn't have a method defined

that responds, it will say, OK, well I, none

of my ancestors have a method with born or

whatever it is. So I'm just go to this

method_missing hook. And so you can define how you

want to handle this.

And what this does is say, all right, I've

got a reference to a separate object, and I'm

expecting that object to know what to do with

this. So I'm just gonna take the name of

the method that came in, any arguments in the

block, and just pass it along that way. Whatever

happens, happens.

So that's my simple, dumb implementation of this, right.

So let's just take a look at the user

that we initialize. This is actually in the documentation.

I changed it a little bit, but if you

go and look at the delegate library, this is

the sample that's in there.

So I want to know when the user was

born. And I could add another method to the

class and say, well, give me your birth year.

But I don't want to pollute my, you know,

representation of the user, of what it is with

extra stuff just for our particular case.

So what I can do is that, instead I

can make this user decorator. So I can use

this delegator class that we created before, and say,

all right, I'm gonna initialize and I'm gonna have

reference to that user, and when I call born,

it's just gonna call super, which will go all

the way through, hit method_missing, ask the user for

born, and then call year on that, right.

So what we end up with this. Same exact

thing, decorated_user.born is the same as user.born.year. And this,

this allows you to have this decorated user take

the place of the user. And you just give

it a little extra behavior for this particular case

and just swap it in there.

So the problem is that in the implementation that

we have, decorated_user is not the same as the

user. They're different objects. But we want them, we

want this decorated_user to just sit in place and

act like it is the user that we care

about. So we can do this. We can just

define this double equals method, right.

So just say, any time I compare you to

another object, if that other object is the same

as the one that we have stored a reference

to, then return true. Otherwise it'll be false. The

problem is, what if we're looping through and we're

comparing something we've already got wrapped? What will this

be?

False, right.

All right. So that's fine. We can fix that.

Not something I would have thought of initially. I

probably would have written some code, started using it,

ran into the problem and realized, oh, I've already

wrapped this thing.

So we can just return true if the other

object we're passing in is me. Like, if it's

the same object, just return true. And then it

works. But this is already solved. All you have

to do is require delegate and inherit from SimpleDelegator.

And there's a whole lot of methods in there

I'll show in a bit that are already defined

like this. The problem has already been solved for

you, so you don't have to bump into those

errors, find out where the pain points are. You

can just use SimpleDelegator.

So here's the structure with a lot taken out.

But SimpleDelegator inherits from this Delegator class. And even

though this is the same name that I used

earlier, this is the one that we're gonna be

looking at that is defined inside the delegate library,

right.

It inherits rom BasicObject. It has this initialize method,

which you can see, all it does is it

calls _setobj and it passes in this object. That's

defined down here. And you see from this, it

raises an error, right. So this is designed for

you to inherit from, and you define your own

methods.

Likewise, method_missing - just get the object and send

it. The same thing we did where we had

an object reference, but this just had a method.

But this also raises an error.

So you wouldn't even initialize a Delegator object. You

would make your own class, inherit from it, and

then you'd have to define that method. So that's

exactly what SimpleDelegator does. It stores this delegate_sd_obj method.

But one other thing that it does that is

very helpful is it, when you're setting the objects,

when you're initializing, it makes sure that you're not

trying to initialize with yourself or set it to

yourself. Cause you can call this method at any

point, if you're wrapping an object and you want

to swap it out to another object, you don't

want to accidentally swap in something that's already been

wrapped.

So if we were to do our own implementation

of this, our user decorator, where we just inherit

from Delegator, you might make the mistake of doing

this: saying, oh well I just need to set

it to something and then get it.

But the problem is, this is what you'll run

into. So there's a lot to learn from just

reading the code and seeing how this problem has

been solved for you, not going down the road

of trying to implement your own, just say I

know enough method_missing, I'm just gonna use that in

a class that I create. Over here the problem

is solved.

So I've done this. I've made my own decorators

or presenters. And the one thing that I don't

like is these method names. They're really ugly. It's

great that there's a standard interface across all of

them, so you can use polymorphism in your application

and swap different decorators in and out, and if

you're gonna call mess- you know, call _getobj_ or

_setobj_, it's always the same. But when I'm writing

my code inside my methods, I want it to

look like this, right. I want it to map

to the domain that I'm using.

If I'm working with the user, I just want

user or user equals or profile or profile equals.

So one way of doing that is creating your

own decorator class, inheriting from that and then just

aliasing these methods. That gets kind of cumbersome. It's

repeating code over and over again. And when I

know that I'm doing this in my application, anybody

in my team is doing this, we see this

type of thing and there's a pattern happening here.

So let's try to take this out. We know

this is how this works. And let's just let

the computer do the work for us, right. That's

what it's good for.

So you can learn about how Ruby class inheritance

works just by reading this library as well. There's

an inheritant hook that, when you inherit from a

class, you can do things with the class that,

that's becoming a subclass.

So you have this self dot inherited method that

we're defining on our decorator class. And it has

a reference to class, and what we can do

here, what I'm doing is I'm saying, split up

the name, so if there's any name spacing, I

want to get rid of that. You know, myApp

double colon user_decorator. And I want to take user_decorator

off so all I have is user.

And then what this code does, not necessary that

you know exactly everything, but what it's doing is

it's saying, if you've got user, just downcase it,

or if you have ShoppingCart, just downcase it and

underscore it. If you have ActiveSupport in your app,

if this is a Rails application, it's really easy

to just send those messages to the string. This

is how you'd do it if you didn't have

ActiveSupport.

And then this is exactly what we did before.

So we have the class in hand, and we

can call :alias_method, object_name, :_getobj_. So this is where

user shows up, and user equals, right.

So I like doing that, because then I end

up with stuff. And I still have those _getobj_,

_setobj_ methods. So the polymorphism in our argument still

applies. But when I'm writing my code, I want

to use a word that refers exactly to the

concept I'm writing.

So let's take a look at the Delegator class.

It inherits from BasicObject, and then it does all

this weird stuff. Remember, the first time I read

this, I saw this and there were these magical

methods up there. And I wasn't really sure what

it was.

It's dup'ing kernel, evaluating it, undefining it, and then

including that dupped module. Really strange.

The reason for this is we want our SimpleDelegator

objects, which inherit from this, to act sort of

like objects, sort of like basic objects. If you're

not familiar, BasicObject has some very, very few methods.

Fewer than Object does. And the difference here is

that objects have this kernel module included in them,

and they also inherit from BasicObject. So what we're

saying here is Delegator class is saying, I want

you to be like an object, but I don't

want these methods.

So all of these are being pulled off. You're

saying undefine these from this module that I have

dupped, and then include it. And the reason for

that is, we want to_s and inspect and all

these other things to hit method_missing so it goes

to our wrapped object.

So that's what's happening here. The whole reason this

exists is so that we can pass these through

to the object that we've got internally. Which is

great, because when you call user.inspect, you get this,

and user.to_s you get that, and likewise you get

the same thing from your decorated_user.

So it, it really does look and feel like

the object that you want, it's just got some

extra behavior. The weird thing about it, though, is

you run into this case, where it doesn't delegate,

or it doesn't undefine these and send them out.

You still know that you have a user or

you have a user decorator.

This can become troublesome for you if you use

something like that, maybe in a Rails application. Because

if you ever build your own and you find

that you're using this form_for method, which looks at

the name of the class and then tries to

figure out where it's supposed to go, you have

this odd action, user_decorators slash 1. Which is probably

fine if you're building an app for costume-makers or

something like that.

But we really just want it to go to

users.

DisplayCase is a gem that helps solve this problem.

This came from Avdi Grimm's Objects on Rails. And

what he does, here, is he uses alias_method and

what this does internally in Ruby is it actually

copies this method. So you're saying, giving me a

method that's under under class and define it exactly

the same way as class is defined.

So you have two methods that do exactly the

same thing. Same procedures, whatever's defined in one is

now in the other. And then it gives them

the opportunity to then go and redefine class and

say don't give me your class, give me the

wrapped object's class.

Draper's a little different. Draper is not SimpleDelegator. I

think they, they have method_missing inside there. And there's

a lot more code done to figure that out.

And they actually turn to ActiveModel here by delegating

model name to the object class, and they get

their object class from the inferred object.

So there's a lot going on inside of Draper,

right. And that's all to solve problems like turn

user_decorators into users. So understanding this concept will help

you in developing simple little apps, where you just

try to just do some method_missing magic to just

wrap an object, and you run into this type

of thing.

That's how those gems do it. So if you're

gonna build your own, you need to know about

that thing. Are you going to redefine class or

are you going to try to figure out what

ActiveModel's looking for and hook into it similar to

the way that Draper did?

So the other thing that blew my mind when

I was reading delegate library was this thing.

You can see, it's defining a method and it's

a capital letter. Who makes, like, aren't constants capitals?

Isn't that one of the rules of Ruby? Like,

everything that starts with a capital is a constant?

Apparently not.

This comes with it, and in, in fact, in

the documentation for it, it says, this is the

main interface for this library. I rarely see this.

I always see people user SimpleDelegator. I always use

SimpleDelegator. But according to the documentation, this is what

you should be using.

So the way this works is kind of like

this - that's really how I see it. But

it's just making a new class, and if you

have never done this before, you can call new

on class and pass in some other existing class,

and that returns a class that then you can

go and effect. It allows you to dynamically create

classes.

So if you want to do something like this

on the fly, you can do that.

And I like the fact that it's capitalized, because

it makes me think about the fact that I'm

creating constants. And then it returns the class at

the bottom.

So this is what, what, you know, our structure

is. And I want to talk about how the

ancestry is built. The ancestors are, you know, all

the classes and modules when you hit method_missing, it's

gonna go and look through all of these things

to find a matching method, and then go into

your - well, when you send a message to

an object, it'll do that, then it'll go to

your method_missing.

This module is that kernel dup. It has no

name. It's dynamically defined. It wasn't given a constant

name. And so this can be kind of tricky

when you're dynamically creating constants. If you don't give

them names you can run into ancestry like this,

and you might actually look for the name of

a class or call name on that class for

module, and it'll blow up because it doesn't actually

have one.

But this is what you could do. Going back

to our other example, you could make a user

decorator to just, just uses delegate class and I

pass in user. So I'm saying this is how

I'm making an object that's gonna act on behalf

of the user. But you can see what happens

to the ancestry here. We have this dynamically defined

class, and we lose reference for what it actually

is.

But I want to do all the awesome metaprogramming

stuff that I did to alias_method so I can

use them, so I can actually just assign a

constant there, call class.new, pass in delegate class and

an instance of the user and get its class,

do all the same stuff that I was doing

before. This is all to alias the methods to

user, user equal.

So that would allow me, if I wanted to

create something on the fly - didn't know what

kind of class or I wanted to be able

to add classes to my application and have presenters

defined for me automatically, I could do this. And

I'd just get the class from my object and

pass it along.

And then, of course, I thought it would be

awesome to make a really cool gem to do

it. That doesn't exist. But Decoratificationizer. So you could

do this. If you wanted to just pass in

an object rather than a class, you pass in

an object, do exactly the same thing. You use

delegate class to define your class, and you've got

a reference to it here, and you can assign

that to a constant and do whatever you need

with it.

All right. Forwardable.

I'll talk a bit about how these two are

different a little later. But this is the way

I see forwardable working, right. I've got a user

and the user has an address - and address

didn't fit in the little hexagon I had so

I had to shorten it up.

So if I send a message to address.user, I

expect to get this address object. And then I

could send city to address and get Miami. But

maybe in my application, what I really want to

do is just ask the user either what city

are they in or what's their home city. And

I just want it to return to me Miami.

I don't want to spread knowledge throughout the system

that the user has an address, that, whether it's

current or it's their home address or whatever it

is. I just want to know that there's an

address associated with this user and I want to

know the city that they're currently in.

So this is how I see it happening. This

address - this isn't a wrapper, but it's more

like an internal reference to an object. And I

don't care from the outside. I just want to

say give me your city, and internally it will

say, I'm gonna pass city along to address, and

then we're gonna return that. Just forwarding it.

So this is - the forwardable library gives us

Forwardable and SingleForwardable. And then there's forwardable method, or,

module that fits in a Tweet. So you can

Tweet that.

That's actually pretty faithful to what Forwardable does.

But I'll expand it a bit and we can

take a look at it. So the difference, of

course, with this is it's a module. So you

can create your own class hierarchy, not have to

inherit from this. You just kind of add it

wherever you need it.

And what it does is it would define a

method on a class. You extend the class with

forward - define this method, and you can say,

this is the reference that I want it to

go to. So in this case it might be

address, right.

And then here's a method name. And one of

the really cool tricks that I've found in reading

this library was I can give it three arguments,

and that third argument, if I don't give it

one, if I only give it two, it's just

gonna say, well your third argument is your second

argument

So it actually evaluates that, I can reference the

third one if I only give it two, it's

gonna use the same exact name. So it just

assigns it if, if you didn't give it a

third one. That's really useful.

And then what it does is it evaluates the

code below in the context of the current class.

So if you've extended the forward class and you're

gonna forward to address, it'll say all right, I'm

going to define a method here, whatever alternative is,

so if it's city, if I pass in city,

it's gonna define that. Whatever args there are, and

then it's going to take my reference, my address,

and say send it city, pass along everything that

comes with it.

So let's say we have this address right, and

a person, a person has a name and an

address. This is just some structure to get you

to understand how this might work. Like, maybe you

have this in a database, but this is good

enough.

So I've set home to be Main Street, Miami,

Florida, whatever it is. And then I assign home

as the address for the user.

So in my application, if I want to ask

it what city, I could say, well, get the

user's address and then ask that address for its

city, right. But that means I'm gonna be working

with multiple objects, and if you do that, then

the responsibilities of your code kind of seep into

the relationships that exist in your objects. And you

should try to avoid that, because if I only

rely on the, the user to know about where

it is, then I can just ask the user,

or tell the user to do something.

So this is essentially what would, what was happening

with forward. If I extend it, I can do

this. I can just say forward city to address.

It's the same exact thing. It didn't- it dynamically

defines that method, so at load time when I

boot the application up, it's going to go through

this class, define those methods. So this is different

from method_missing. It doesn't, it doesn't go through looking

through the ancestry to findthe method. It's right here

on this class. So it's gonna be much faster.

And then I can just have the user tell

me what city is it. And we'll say Miami,

right.

Now the other thing that I can do, is

there, here's the alternative. Before, when I didn't give

it an alternative, it just said alright I'm going

to assign it to the one that you gave

me in second argument. But here I can say

I, I want this to be home city. So

this would be where you live or whatever the

concept of home city is in the application.

But wht happens here is, if I call city

on it, no it's a NoMethodError. It doesn't define

that. it only took the third argument.

But it allows me to do this. I can

very easily have this understanding of a relationship where

a person has an address and I can just

say anytime these methods are called on the end,

just send these other methods to that object.

But here's how it works in forwardable. When I

first saw this, I thought this was really weird

syntax, and unRuby-like. This def_delegator thing.

But it's essentially the same thing that we had

in our forward module.

It takes three arguments, first on is the object,

second one is the message that you're gonna pass

to that object, and the third one is the

message that you're going to receive to send along.

So I want to talk a bit about how

you can clean this up. If, if I'm not

going to do the home city thing and I

just want to pass along city number, postal code.

You can do the plural version, right. def_delegators, the

first one is, is the object you're gonna send

to, and then any number of method names afterwards.

And then this really weird syntax, that I was

surprised worked - I don't know why - but

you can use pretty much anything as a key

in a hash. So this is just a hash

argument, where I can say, I'm gonna delegate all

of these things to that.

And I prefer to write it this way and

I prefer to read it this way, cause this

is how I think about it. Any of these

arguments are just gonna go over to that thing,

right

But when it defines the method it defines, you

know, it evaluates it in a string, and it

will turn this into a string so you can

actually use instance variables, so you don't actually have

to have a method. You can have an internal

reference to another object. It can be whatever you

want. And you just put that reference there and

that'll work as well. So it defines a method,

it'll look for that instance variable.

ActiveSupport, from Rails, has its own way of doing

this, which is nice in that it has this

allow_nil flag which forwardable doesn't have. But what happens

is, if address is nil, you can just say,

give me the postal code and if the address

is nil, just say nil. It won't throw an

error. It won't say there's, there's some problem where

you called nil on, or you called a method

on nilclass.

But the other thing it does is it allows

you to say prefix true. and it will automatically

figure out what that is and define the method

as address_city. So it helps you create the interface

that you want for this person class without revealing

that there actually is an address object and that

object has other things.

So you can build a library for something and

adhere to this interface that you design and change

the implementation later.

The other thing you can do is define your

own prefix. So ActiveSupport has this. Forwardable doesn't. So

there's really nothing preventing you from writing your own

methods that do this. All you have to do

is say, well I'm gonna pass in an options

hash, and I can do my own allow nil

or allow blank or prefix, whatever you want to

do, and you can do the same exact stuff,

with the same code that's in forwardable. you can

create your own.

I haven't used this much, but SingleForwardable is actually

really nice. I only discovered it recently. So I

don't know if any of you have code like

this. Something goes wrong, you capture the error, you

send it off to some external system to keep

track of it.

I found a good thing to do in my

code is to not reference that third party directly.

I want to build a facade between me and

it. Because maybe they'll go out of business. Maybe

we'll decide that we need features from some other

library. For example, let's say I want to move

to app_signal. I want better ties in with ActiveSupport

notifications or something like that.

So I can start with my delegator sending stuff

in this notify method to errorbreak, right. But this

is the contract that I want to have, right.

I want to say save for later. I want

to look at this later.

And so this is what I would use in

my application. I'm gonna say, this is how I'm

gonna handle it. I don't want to reference this

third party directly. And then later I can change

it and say, well, they used notify and they

use send exception. That's OK, I can still use

save for later.

So I just designed my app so that I

can swap out the third party.

So the difference between these is that at runtime,

you can wrap an object in SimpleDelegator. you can

add behavior to it. You can have this object,

your wrapper, act like it is the other object

that you care about. And forwardable happens at boot

time, because it's dynamically defining methods. So you're not

gonna be changing things there. That's, so, I, I

look at this in terms of, forwardable is great

for when I know the relationships ahead of time.

When I know what methods I need to forward

ahead of time.

SimpleDelegator is great when I either don't care what

methods are gonna come in, because I'm just swapping

in another object and I want method_missing to pass

it along, or I don't know. It allows me

to build, for example, an interface where, if we're

going to expose new information to the user, I

can just swap this in and if there's nothing

defined to override behavior, it will just pass it

along.

So there's a lot of similar projects out there

that I encourage you to go check out. You

can write your own stuff. You can use these

libraries. You can explore them and figure out the

concepts and the way they use them. I wrote

one called casting. Nathan wrote one called rep that

uses a lot of forwardable, and doesn't use SimpleDelegator

stuff.

here are other examples of SimpleDelegator style approaches. Definitely

check those out. I send out tips on a

weekly basis from my newsletter. You can sign up

there. And I'm selling a book called Clean Ruby,

which talks about a lot of this stuff and

how it applies to your application architecture. You can

get twenty percent off on the book.

All right. Thank you very much for coming.
