RubyConf 2013 - The Polyglot in the Code - An Elixir/Ruby Mashup - Johnny Winn

JOHNNY WINN: That's good. So I hear you guys want a talk, not just watch me stand up here, so. We're gonna kind of get going. How about that?

My name is Johnny Winn. I work at Hash Rocket in Jacksonville Beach, Florida. You can hit me up on Twitter at johnny underscore rugger. The rugger is from rugby. A lot of people kind of get me like I didn't know how to spell Ruby. But, no, it's actually rugger. Rugby.

Before we begin, I wanna tell you a few tidbits about myself that might help you understand some of my motivations behind this talk. But also maybe drum up some sympathy for me.

So I'm married to this brilliant woman with a degree in education. That's not the part I need sympathy about. Together we have seven kids. Yes. Seven kids. All of which are homeschooled, because we like torture even more. And three of them are still being homeschooled right now.

Needless to say, we spend a great deal of time working on teaching methodologies, because we want to make sure that we're doing the best things when it comes to educating them. So we want to try to understand the learning process and like what goes on as a child actually grows up.

And a lot of that can actually come back and help us as adults. Almost all the time, these, these things that I learn about teaching methodologies transcends into my everyday work, work habits.

Maybe.

All right. You might be asking yourself why. Well, why am I sharing this with you? Well, in part because there's some hitting messages in my talk. I want to actually spark some of that curiosity that brought a lot of us into programming. I think a lot of us find ourselves in a particular area of expertise and we don't really want to venture out of that. Sometimes it's, it's for various reasons. Sometimes it's because you don't feel comfortable. Sometimes you're, you're not sure, you don't want to tread into, to new waters.

But that's what brought most of us to programming anyway. So I want to, I want to instill some of our, I want to spark some of that curiosity. But it's one thing to be curious. But sometimes we need direction in our efforts so that it doesn't seem wasted.

Relating stories about my kids to what I actually do actually helps bring a lot of insight in how we learn as adults. Plus, what's more entertaining that hearing stories about a stranger's kids, right?

Pictures of sto- of strangers' kids! Yes. A long time ago I actually had kids this small. That's my second to youngest there, stirring. This isn't actually the picture that I wanted. Cause the picture that I wanted is the one that I had in my head, and most parents know you have the pictures in your head much better.

But as they were younger, they would actually go into the kitchen and experiment by cooking. As a dad, most of the time I just kind of saw it as making a mess. My wife, of course, looked at everything as a learning experience and tried to convince me of that.

But they didn't actually understand anything that they were doing. They just kind of threw things together and, as you can imagine it becomes a hodge podge of just, this that and the other and, well, a mess.

But they didn't get frustrated.

When learning, it's important to tap into those, the, the prior knowledge that we've gained. Like, my kids, all of us at one point in time were novices. We were fumbling around to some degree or another until we kind of found something that we would relate to, we could relate to. And that helped ease our transition into understanding.

Those same tools, we can take advantage of.

An education, the theory of constructivism, states that knowledge is constructed, not acquired. That being said, that means that everything that we do, we actually can take and build on the next thing with. It's not just one day you wake up and you know Ruby. You actually have built things along the way that have helped you grow.

This seems obvious from an evolutionary standpoint, when you think about it. If you're trying to figure out how to light a fire and you successfully do it, do you really care about the hundred ways that it failed? Or the one that you got it right?

Keeping that, keeping that knowledge is sometimes good enough to get us to move forward.

This brings us to scaffolding. Ironically, scaffolding theory has nothing to do with Rails apps. But it's actually a theory that emerged as the predominate, predominate acquisition of language in English as a second language students.

What they found is that if they give the students something that they kind of know, so that they don't have to worry about, it makes the progression, the new language even easier. So this makes sense, right. If you're not worried about the things that you don't have or you don't know, because you can count on something, it's easier to move forward.

This is all great stuff. But now you're probably thinking, what does this have to do with programming? Or even better, what does it have to do with being a polyglot?

So it's inevitable new languages, they're gonna come and they're gonna go. You can either stay with your old language, or you can move forward into new languages. Not every language you explore, you have to become the next thing. Sometimes you just learn it to bring something back to your core language.

And because learning a new language doesn't mean we have to abandon our old. Now, using one language to learn another language is part of the polyglot lifestyle.

So how do  you live that polyglot lifestyle? Many of you, probably, I guarantee, know at least one or two languages, if not more. Ruby, JavaScript, possibly some CoffeeScript. SQL, at least, I bet you this room covers that.

But the line isn't just about multiple language and a lifestyle. It's about how you take advantage of those languages. And using it, using one language to learn another is an example of this. And for that, I say, you're all lucky, because you're Rubyists.

Ruby is a flexible and dynamic tool that lends itself well to bridging gaps between languages. You can actually scaffold around another language to help ease some of the transition. So today, we're gonna go over a couple of things.

First, it couldn't be an Elixir/Ruby mashup without just enough Elixir. So we'll discuss Elixir, we'll get into some of the relevant mechanisms. I can't actually teach you all of Elixir today, but hopefully I can spark some curiosity to get you to go out and learn.

We'll also have a look at some of Elixir's emerging frameworks, like Dynamo, which is a Sinatra-like web app, or, a Sinatra web framework, and Echto, which is a database integration tool.

Next, we'll touch on Ruby. We'll throw it in there. It'll move in with its Elixir code, and we'll see how we can use Ruby to fill in some of the gaps that are missing in our Elixir implementation. And finally, I'll wrap things up in a nice, neat package that you can take home.

So in case you haven't heard about Elixir - has anybody, has everybody heard about Elixir? Most everybody. Has anybody used it? I have, too, I suppose I should raise my hand. But you may have guessed that.

Well, I'm gonna throw out the quick elevator pitch first. Elixir is a functional language. It was created by Jose Valim and, if you're familiar with Jose Valim, he was a Rails core team member, a Ruby hero. And he wrote some little authentication library, Devise, you may have heard of.

It runs on the Erlang virtual machine. Yeah, that's right. I said Erlang. We won't get into that. But both Elixir and Erlang compile into the same byte code. This is actually quite handy because they share data types.

So it makes the, so there is actually no performance issues or conversion issues when you're calling one language from the other. You can literally call Erlang directly from your Elixir code and vice versa.

So with Jose Valim at the helm, you can imagine it looks very similar to Ruby.

Syntactically. But it can be deceptive. And we'll get into that, you'll see in just a minute. SO this actually sets itself up quite well for, for part of our polyglot experiment.

So let's put the fun in function. Ruby is taking on the main role in this, in this talk, but we need to understand a little bit about Elixir and a little bit about, a little bit more than just that elevator pitch to really provoke the curiosity. And so that when you're looking at the code, you kind of understand what's going on.

So let's dive head first.

We'll start with functions. Elixir supports both named and anonymous functions. Right here we are creating an anonymous function, which we use the keyword f(n) defines our function out, and then we can just execute, and look. Hello RubyConf.

If you'll notice, there's a dot in between the execution, or, or between the variable and the execution of the function. That's just to let the system know that it is, I don't want to get too into that. I know it's a little confusing right now. But there's a lot of talk in the group about that going away altogether. So no sense in going over that too much.

But unlike Ruby, named functions are, cannot be defined outside a module. So when you go into the repl and you actually try to create it, you're gonna get a syntax error because it has to be set in a module. That's part of the deceptive part. Remember, it's not Ruby.

Now named functions within the module can easily be invoked by defining the module, defining the function, and then calling. And you can do this right in the repl. The repl by the way is called IVX instead or IRB.

And then we can go ahead and call greet today. Hello.

So if you notice, the do blocks. Yes. Those are do blocks. Every body of a function, or actually, most things in Elixir, takes a do block. It's essentially a call to a macro def, which takes a name in the do block. The do block is just the code to be executed.

With that opens up a whole realm of metaprogramming possibilities, where you could literally use Elixir to rewrite Elixir, which is kind of weird and way more than a forty-five minute talk, probably.

But this pattern is used throughout Elixir. So it's good to be familiar with it.

And really, the do block itself is just some syntactical sugar for an inline function, where the do is just a named parameter, and you can see when we actually do an inline function, the same thing can happened.

Now, we're gonna move onto pattern matching, which is really important to understand in Elixir. Dave Thomas does a great explanation of the general pattern matching in Elixir. So I'll leave that to him.

But how functions use pattern matching is really important for the way we, or, for this talk. So it's important to know how they actually work.

Elixir uses pattern matching to bind arguments to the function's parameter list. So we can do things like this where we have a function that we can say, if Johnny is it, it's just you Johnny. If it's any other name, then we'll actually send a message to them.

And so the same function is called when we pass to Johnny, we get, oh it's just you Johnny. When we call it again, say Matz, oh, I've always wanted to meet you.

So another way of differentiating functions is why Guard clauses. I'm a big fan of Guard clauses. When you see my Elixir code, I use them quite often. But we can easily convert our pattern matching from the parameters to a guard clause.

And what we have is we have a when clause that says, when the name equals Johnny, do. It's just Johnny. Hmm.

Now, another thing that we're gonna encounter is recursive calls. This right here is something pretty simple, where we pass, basically pass in an array. It's just the summing of an array. But if you'll notice, there's a head pipe tail. What this actually does is split the first, or the first item in an array and the last item in an array. We can then take and say, the first item plus the sum of the last set of items, which it'll continue iterating over until it reaches an empty array and then pass back a zero, which actually cause everything to add up all the way.

When we invoke this, when we invoke this sum and pass it an array, we actually get the total, ten.

So that's just some syntax that you're gonna wanna know so that you recognize it when we hit it later in the talk. But before we get too much further, we need to discuss mix.

All right, if you're familiar with Elixir, you're probably familiar with mix. It's similar to Clojure's line again, and it's basically used for a variety of tasks, anything from bootstrapping your Elixir projects to managing your dependencies and executing your test suite.

Mix utilizes configural environments to scope compilation settings. This is handy for us, so that we can actually know whether or not we're running in a test environment or a dev environment based on mix and we can actually set that in our code.

Another thing that we need to talk about is Dynamo. Dynamo is a web framework in Elixir. Like I said earlier, it's similar to Sinatra. It also has a template in its, a template engine built into it that's comparable to, say, the syntax of ERB.

It's designed to stay out of your way. It's supposed to create high performance concurrent applications. There's a number of other frameworks coming out in Elixir right now. Weber might be one that you want to look at that's an MVC framework similar to Rails. But Dynamo does exactly what we want for this experiment.

What happened?

OK. I don't know what happened there. SO anyway, that, and that brings us to Ecto. Ecto will handle our database interactions. So we're gonna use that to implement our solutions.

Now, the key to know about Ecto is that it divides structures into repository entity model and queries. This decoupling separates storage data and behavior.

The main thing that we're gonna be concerning ourselves is with the storage and the data details. But it's actually a handy way to break things up, so it's a little different thinking in - I guess, coming from an object-oriented background, it's a little different to think of everything as modules than it is as objects.

So this is all great. So you're probably thinking, well, what's missing? I'm sure I could rattle off any number of gems that would be easy, that you probably use on a day to day basis that would ease any type of transition for you. But we only have a few time, or, we only have so much time. I always say that with enough time and money that anything's possible, but we're limited today.

So there's a couple areas that I want to focus. Although Elixir has Xunit, which is great for doing unit testing, but it doesn't really help us with, like, say, behavior driven development. That's something that's really important to us at Hash Rocket. So when we want to do project, especially a web project, I want to actually utilize some of those testing features.

The other thing that, that Ecto doesn't have is data migrations, which you'll find that as you, as you're working with a project that you're having to do a lot of database interactions with, it's a real pain to try to manage those. So if we can have a tool that will allow us to use migrations outside of the scope of the project it'll make our life a little easier.

So what do we need to do? Ruby. We'll throw in a touch of Ruby. Ruby does a perfect job of, of bridging those gaps that are missing I know that one thing that I've found, like I said earlier when I was learning Elixir, I spent a lot of time going, man, if I could only do this, or, or I wish I had this. And I was like, why don't I just use it?

It's real easy to inject Ruby inside another project, and so that's where we're actually gonna begin. We're gonna cover behavior-driven development, oh, sorry, this is slow. Behavior driven development and integration te, or, migrations.

So let's first look at the behavior-driven development solution. Capybara, Cucumber, and Rspec are a trio that work perfect for behavior-driven development, and it's real simple to incorporate. Assuming that we have our dynamo project up and running, we can go ahead and create a project and then in the, in the root of that, oh. Before we get that far, sorry, we have to actually add our Ecto and our, our adaptor for PostGres so that way we'll actually be able to integrate with PostGres.

And this is actually in the mix, ESS file that we go ahead and add these in. Then we can start the server. Yay! Server starts.

Tada! So then we go in and add a gemfile. And add our Cucumber, Capybara, and Rspec gems. Once we actually go ahead and bundle that, we'll have Cucumber available to us. Now, when you try to run Cucumber in a typical scenario, it's gonna want to spin up a server. Capybara spins up the server. Well, we don't want that, cause we're gonna actually inject this into mix, so we want everything to be scoped underneath the mix, testing environment.

So what we can do is we can actually add a Cucumber conf file and go ahead and we want to shut off Capybara's running, running of the server. And that's as simple as just setting it to false. But we also want to give it the, the app host to actually call to, which is the default, default instance for the server that's run through mix, which is the 8888 port.

Now, that's great. But we actually need mix to run this. So now this is an actual mix test, and so what we can do is we can drop in on the shell and pass the command for Cucumber, tell it where our features are, and then, this we're just formatting into Progress so it'll, it will just get the dots run through.

But we can then execute mix test, and there. So mix test is now actually firing the environment, scoping it under the test environment, but then running Cucumber. This is a little boring cause there's nothing there, so we should probably go ahead and add a feature. We'll just do a simple feature where we add some posts, throw it on the homepage, and then we should see those posts.

We'll run this and, is anybody surprised?

Of course we don't have any steps. We just threw the feature together. So we'll go ahead and add our steps in there. And then now we have failures. And this is actually how the failures work - so this is gonna kill that. And then we actually would get our failure within our other mix messages.

So now that we have our test suite set up and our first test, it's time to look at data migrations.

This is actually really easy to, to implement. And really handy if they don't exist. So we go ahead and we add our, our ActiveRecord, our PostGress gem, and builder. Now the reason I'm adding builder into this is because Cucumber actually has a fixed version of, of builder, and so if you try to not add builder, it's, you're actually gonna get an error. SO that has to be added manually. That's why that one's in there.

Other than that, it's ActiveRecord and PostGres are the important ones.

So we need to tell it where. Where are migrations gonna be located? We can create a Rake file, and then at the top of our Rake file, we actually set the path and just require all the, all the migrations that are in there.

We also - because you're Rubyists.

We're gonna create a DSL similar to Rails, just cause it's handy and more people are familiar with it. So we create the DB namespace in our Rake file. We give it a configuration for our, for our server, and then we can run migrations by establishing a connection and then, what I actually do is I loop through all the descendants of migration, and so it'll pick up the route there and actually load the, or, it'll run, execute them, based on the direction that we send into migration.

So if you want to take something up or down, roll something back, you can go ahead and add that in there. And we also want to create one for test. Now, we are gonna run two different servers here, based on the environment. So we're gonna have a test server and a dev server. So when we run tests, we want to make sure that we're scoping our migrations to test, and that's how we're gonna accomplish that here.

Now we can run it and that was anti-climactic.

Well, we don't have any yet. So we should probably go ahead and add some. Now here's a migration that I'll create, and you just go in here, you create your SQL, and then add- put your SQL in there, and then any time you run up or down, it'll go ahead and create that.

Now, to prevent the table from constantly getting errors, you just run a if not exist, and that way you can do it. now, if you want to go ahead and do an update, I would do that as a separate migration.

if you're doing this just for fun, keep in mind that these are all just gonna run in alphabetical order. So you might want to actually, either work on your naming. You don't actually have the same type of naming conventions as you would in a Rails application. But for an experimental purpose, this gets you started.

Now. OK.

Now, remember we left this. I don't know if anybody caught that. But we need to generate some posts, otherwise, every time we run the test there's not gonna be anything to, to look at. We can go back to our Cucumber rb file and add this little snippet of code, which is basically establishing the connection and then giving it the test database to call.

Then we add a post class to actually be the migration, and then we can do inserts and deletes straight from here. So as the step runs, it calls the upstep, inserts whatever you want. One of the cool things is that I actually went, like, it's further into the project when you get a little deeper into it, is you could actually use naming of these so that you can, you know, define tags in your Cucumber strip that are gonna run specific ones and you can use faker to create unique items that go into the database.

Anytime you want to do like massive amounts of data or things like that. But for our purposes right now, just a simple insert will get us where we want to go.

So we add our posts up there, and it'll actually do our insert for us. Like I said, tags also work really well with that. But we also want to do some clean up. So after our Cucumber, we go back to our Cucumber configuration and just add an after through each scenario so that it goes through and tears down or deletes the ones that are there.

So it kind of cleans up after itself.

I think that's enough ruby to get us started. So now for the Elixir. I'm sure this is the part that everybody loves to see.

So now we need to actually go back to our Elixir project and we're gonna do a few things. We want to get our database, our call setup. it uses a repo cla- or, yeah, a repository class. We're just gonna name it Repo.

This is as simple as it is to define a repository in Elixir for Ecto. And we just make a call out. The mix environment is determined at runtime, and then we can actually send that over to, to our URL so that they can actually come back, and whether or not we're running in test or dev it'll actually set us to the right, the correct repository.

The next step is to define some models and some core modules. Our all function is actually a remapping of the records that come back, cause we basically want to create a tuple, and we're gonna actually do that through an anonymous function. So it's gonna iterate over all the records and then divide them up into tuples, so it'll actually make it a little easier to do pattern matching in our template later on down the road.

because, keep in mind, everything's gonna go across the web, it's gonna come through as more like a JSON object. And so it's a little easier to just iterate over it if it's already divided out.

Now, onto the dynamo routers. Routers are an important part of the way Dynamo works, and it's the entrypoint to the application. So, and, anybody that uses Sinatra, Sinatra fans, folks here? OK. So this should look pretty similar to a typical Sinatra.

One thing to note is the con, con variable, which if you see we're assigning it and then passing it back. This is actually not assignment. This is pattern matching. It's saying that the value on the right could be the value on the, could be equal to the value on the left, so then they therefore match.

So what you end up having to do is you have to do the assignment and then set it and then pass it back through the render.

Now all this is just currently the way Dynamo works. Everything is still kind of in flux so this might change. But it's just something to note when you're looking at a router in Dynamo.

And finally, we have the template. And the template, we actually use a list comprehension to iterate over the set, which is that tople, or tuple set, and if you notice that we have another score for that first argument. That's because we don't really care about the ID at this point. We just want to display the information on the screen. And so we just kind of want to iterate over it.

This is actually enough to get us up and running.

So, let's see. we should be able to go over here to our.

Hold on, let me get it to work. Hold on.

Elixir. We should be able to go to our directory here. And actually I'm gonna switch this.

So this way we'll run our mix tests and you'll be able to see it actually run, doing our scenarios. Did you all see that. The fish full of dollars pops up. So that is actually what that actually is is Ruby is being executed from inside the, the environment. It's hitting the test database. It's populating the test database. And then it actually cleans up afterwards.

But it's actually running it. So we've actually used Ruby at this point now to handle some of the gaps within Elixir.

Sorry, just one second. Let me switch back to.

All right. So I've been developing software for the better part of fifteen years. I've seen languages come and go. Some of them better than others. Some of their implementations are better than others. And we can argue until we're blue in the face about which ones are the best.

But one thing that I do know is that Ruby is a great tool for using with other languages, regardless of what you're trying to do. If you're looking to run a tested application that's untested, run migrations on something. You could easily incorporate Ruby into those applications so that it can handle some of the gaps that maybe don't exist or covers what's not there yet.

Technology is moving forward. There's always some new kid on the block. So the, the idea that you can actually use a tool like Ruby is something that, excuse me.

The idea that you can use Ruby to learn other language and progress is actually using constructivism to build upon prior knowledge. It's important to remember that these tools that we use, every day, are beneficial outside of the scope of what we do nine to five.

And that's it.
