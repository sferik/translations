RailsConf 2014 - Too Big to Fail - Chris Maddox

CHRIS MADDOX: Let's see. My name's Chris Maddox. I work at Zen Payroll. We do payroll, which is cool.

So, failure is something that we think about a lot. We transfer hundreds of millions of dollars on a yearly basis. Soon to be billions of dollars on a yearly basis. So the percentages, for us, like our growth team gets really excited about this. They're like, oh, we're like billions of dollars. And we're like, please, just like, leave me alone. I don't wanna, I don't wanna know that. The percentages end up being a lot.

So, today, yeah. We're gonna talk about failure. And some of the ways we're gonna start: we got an agenda. It's like a business meeting, which is great. Business.

So, we're gonna talk about predicting failure. Some of the things we've done to preemptively stop ourselves from going down and, and making mistakes. Especially in the area of, like, database validations and, and user models and all that stuff. And then talking about recovering from failure, which for us is a really big deal because preventing failure itself is like, normally like, that, that's pretty cool. But for us, making sure that once something does go wrong that we don't lose user information. We have a lot of sensitive user information. So we have to make sure that, that we keep all of that together. And then we're gonna talk about embracing failure, which is really weird, but. I was a philosophy major so I'm just gonna talk about that and, like, you, if you like it, like, cool. But if not, whatever.

OK. All right. Chapter one. Changes. DHH. I'm a writer now, so. We're writing chapters.

But, my predictions are notably inaccurate. This is Robert Caro. He's a biographer. He's been writing a, I think four-part series on Linden B. Johnson for thirty years. I'm twenty-three, so I don't even know what that means. But, like, it seems like a long time, so I wish him the best. He's really smart. I would definitely recommend checking out his work.

So this is something that I've run into, actually, a number of times on the internet, and I don't know if you can read this because I screwed up the slide format which is great. There were some problems with your form. Please fix the following errors before submitting again. And then it doesn't really seem to show any errors, which is something that I've, like, I've definitely, you guys have probably seen this on the web, where you click, click save, or like submit, and you're like, all right, like, we're ready to go. And you see this red box pop up and you're like, oh man, what are they gonna ask me for? I don't know, like I, I don't know. Whatever those, like, last, when they ask you for like, those last four digits of your, like, zipcode, and you're like, I don't know what the hell that is. Like, why do you ask me for this? I, I can't validate that.

And so, but in this case, nothing really seems to be wrong. And nothing is like actually, they're no inputs that are red. Like, very poor UX. And this is what happens, kind of as you're application grows. As your system grows. Payroll is very complex. We deal with a lot of, a lot of information. Especially on the employee level. So, in this case actually, I manuall screwed up, Mr. Vannegut, and I apologize.

His bank account information is misconfigured, so he's not gonna get paid in the way that he believes that he will. But this presents a problem because the, the employee model here is invalid, but they're editing a completely different section. So they're gonna get these user valida- or, they're gonna get these validations on the model, and the user's not really gonna know what's going on. And then they're gonna call support and they're gonna be really upset, and support's not gonna know what to do. I mean, they're gonna look at this and be like, who knows what's wrong?

So this is something that we've run into. Users are prevented from fixing or even seeing the actual problem itself, which is frustrating in the moment. You know, in editing these things. But then, as we'll see later, these kinds of errors cascade to other processes. The main culprits being update_column, which is fun but terrifying, and update_attributes with validate: false, which is, like, less. It looks less bad but it's also just terrible.

But these are the things that actually, like, they exist for a reason. There are times when these, these things make sense, especially in, as we'll see, error recovery, when you know that something's gone wrong and you need to save information. We find this with bank transactions. Like, there are times when things have blown up and we need to save information, and if we have to update_column and just kind of, like, snow plow over all the information in there, like it, it actually makes sense, and, and we would rather deal with it later.

As I said before, like, our number one priority is not losing user information. Not losing, like, an SSN or losing bank account information. Losing those transaction details. Because that can be on the order of tens of millions of dollars for a single transaction. I mean, so it's just unacceptable that things, that we don't save the state that they're in.

But then that can cascade, and the user is gonna see problems. And we want to figure out a way to, to handle those, and to see them before the user actually sees them themselves. All right. Looks good.

So this was our solution. Validating all of the things. So we have, like, Rails validations, and those are good. Like, in this situation, the UX broke, right. The UI kind of broke down because something went wrong. But there was nothing really wrong with our code. Like, it was validating something and it successfully told us that something was wrong. But there's no, the communication was very poor.

So what we decided to do, a friend and coworker of mine, Nick Dravasee, suggested this. And I remember we were in a Pivotol meeting and, and he said, well, what if we just ran validations for every model in the database, every few hours?

And I was like, that's a terrible idea. There's, that'll take hours. I mean, we have millions of records already, and, and we're pretty small. So, I thought that was terrible. And I was completely wrong about this, by the way. This is, you should absolutely do this. It's a lot of fun.

But it, it actually, it pays its, it paid its dividends almost immediately. By running these validations. So what we did is, right now in production, every three hours, we validate every single model in the database. And it, every day it takes longer and longer and longer just kind of waiting for that to fall apart. But, so we pulled production data, and then validated against our merged but undeployed code, so that we have a development branch that we then merge into master and, and deploy to production.

But right when code is merged in, every three hours, we're either to pull production data and either test, this is a good way for testing migrations, to make sure that when you run this migration - I don't know if any of you write tests for your migration. I should. I've never done it. But it's something I aspire to.

But it's a good way to find, like, what are the future errors that we're gonna see? Or what are existing errors? What are, like, places where the system - we run a lot of background processes, a lot of very long-running tasks that happen at different intervals during the day, as we'll talk about in a second, that can shift the state of data. And how do we catch those errors before the user even finds out about it?

So this is something that, that we've, we've worked on it. And it seems. It was something that, like, the upfront cost was like, wow, I'm running this process and it's taking, you know, like two hours. And that's, that's a big deal. What happens when we get ten X's big? Like, I don't, I honestly have no idea. But I think it's a very good pattern because for, the consequences of having it go wrong. I mean, these aren't problems that you're not gonna have to deal with. Users are still gonna call in. You're still gonna have to figure out whatever that bug was, however that happened.

But it gives you a lead time in order to solve it in a slow, more managed way, rather than being on the phone with a customer, and they're freaking out and you're freaking out and you're in production console. Not that you've ever done that. But, like, you might have done that. I've never done- I, we're gonna move on. It's not important.

OK. I feel like this picture is really crazy. But, so these are the precogs from Minority Report. If you haven't seen it, I'm gonna give somewhat of a spoiler, cause you've had long enough and Tom Cruise is getting old. So, so, these three, I don't, I guess they're humans, but like, they were, like, genetically modified. I don't know, something happened. So they can predict the future, basically. And they can see, for some reason they only see murders, which seems like a really terrifying, like that's a terrible power to have. Like it's gotta be, it's gotta be really depressing. But.

So they're able to predict the future so then people are able to do something about it. Like, Tom Cruise, like, gets all dressed up, and there are, like, these pin balls and something, and then he, like, stops a murder and it's great.

So we thought about this and we're like, how can we, like, more than just validating existing data that's already been yanked, how can we figure out, in the future, how can we predict the future of what we're gonna screw up later? That's, woah, that gets exiting.

So this is something we started. We have these long-running jobs, and that's kind of what this talk is about, is these really long-running processes. There are advantages and disadvantages to working in the space that we do. We work with the IRS, which is wonderful. We, we're very. Their fax-based API is really, really cutting-edge. So that's, that's really nice.

Also, working bank transactions. I don't know if you guys know how bank transactions work. It's, it's, oh Jesus. So, so you, you decide, like, I want to transfer money. I'm like, yo, like I got fifty million dollars and we're gonna just, like, we're gonna give it away. That's what we do in Silicon Valley. We just give it away. We just give away money.

This is other peoples' money, so it's OK.

We're gonna, so we're gonna make this transaction. So we have, first we're gonna make a flat file. We have these, like, fix-width files and we're just like typing away and like, oh, what a nightmare. So then we're gonna STP it. And we're gonna STP it to the bank. So that's, so that's OK. Cool. We're good. We're good. Good times.

And then, we're like, OK. How do I know that it worked? OK, well, OK. Well I can STP back in and I can check if it worked. Oh, but you can't do that. Because as soon as you put it in there, they take it out. And so you can't even check the inbox to see if it went through. But then, like, OK. All right. Well maybe they'll send me an email and be like, oh, it's good. We got it.

Nope.

The only way that you know that it worked is if it didn't fail. If they don't tell you that it failed in two to three days, then it worked. Or you just didn't FTP it in the first place. But, like, you know, whatever. So it's important for us to run through all of this information and make sure as much of the things that we can control are in control, under control, before bad things happen.

So running a lot of these really big jobs. Running through these transactions. Making sure that everything is happy before we go through it in production has been really valuable.

So now we're gonna talk about recovering from failure, and this is actually more interesting. So, predicting failure is interesting. Like it, it's fun, and it's prevented a lot of, a lot of mistakes from having it in production.

But recovery is something that I think we don't put enough thought into in general, at, at least I haven't. Because it, it seemed like the first approach was, how do I make a more fault-tolerant system? Well, just don't fail in the first place. Like that, like I just write tests, and I, like, QA, and, like, we have happy data in the database and, like, we have whatever. But it turns out that, like, you're gonna fail anyway. Which is depressing but, you know, we get over it.

So this is Mia Hamm. "Failure happens all the time. It happens every day in practice. What makes you better is how you react to it." I love that. She's fantastic. Mia Hamm is just wonderful. If you've ever seen, there's an ESPN thirty for thirty on the 1999 Women's World Cup team. This is not related to anything Rails-related. But it's fantastic so you should check it out.

All right. Anyway. Back to it. In the beginning. So we're gonna go way back in time. Just like a year ago. And this was, you know, you like start, you know how you get really excited, you like start a Rails app and you're like Rails new, like, payroll. And like we're gonna start up and like here we go. And, and everything's just like really clean. You've got tests and like models and like controllers and like, ah, it's just so exciting.

And then you, you realize that there are all of these things you have to do. Like, Payroll's really complicated. You have to send all these payments to the government. You have to file forms. You have to, like, send all these transactions. And you end up, so we have this system of maintenance. And this was maintenance dot rb from 2,500 commits ago. And you can't see the code and that's kind on purpose cause this is, you know, not, not what we like.

But, so basically I can, I can give you the gist of it. It's a three-hundred line method that just, like, runs everything. This is run every morning. And, you know, it made sense, because you could see, like, from a dependency management perspective, like, you could see exactly where things would run. You could see that they were running in the right order. You knew, like, oh this should happen before this and you can rearange it and that's fine. And so, we would run this every day and, you know, if you got an email like this, like, uh-oh. Undefined method shovel for nilClass? I, I don't know.

Then you like look at the docs and you're like, doesn't nil have shovel, or no? No, no shovel? OK, so no. But the biggest problem here is not that we had an error. Because again, we're gonna expect errors. We don't really know what we're doing. We're programmers. So we expect errors to happen. But the problem is it happens, like, right in the middle of this. And this is running for half an hour and then suddenly, like, something blows up in the middle. You have a lot of state that's kind of, it gets kind of iffy.

And like, how do you recover from that? I don't know. If you have good ideas, better ideas than instance_eval, I'd be happy to hear them. But it was really a sign that, like, this kind of approach doesn't really, it doesn't really work. It doesn't really scale. Yes, everything's right in front of you and that's good and you can see it and you can test it. Like, there were a lot of tests around this. But it usually involves a lot of, a lot of brain surgery.

I love the nurse in this picture. She's just like, oh god, what? What's going on? And that's, that's kind of how I feel every day. So, like, why, these kind of things happen, and one of the reasons that it happens is that we have a lot of dependencies. There are a lot of things that we can't control. We have internal, like, functional dependencies is the Silicon Valley Bank. The bank that we work with, and tons of other banks that we work with. The IRS, which again, like, they have, they have a crazy system for management. We have internal stuff, tools that we use. MailChimp, SalesForce. External stuff. Xero, QuickBooks, FreshBooks. Like, charitable donations. All sorts of stuff that we integrate with.

And those are things that we can't control. And that's one of the difficult parts, and if you've been building out a service-oriented architecture, you'll find the same thing, that, that it's really fun because you have this API, and you're like, oh, there's this thing that I want to do. Like, I'll just make this request and then I'll forget about it. Somebody else is gonna do the work. And it's awesome. And, like, you get really excited. Like, you start this relationship and just like, they're gonna do all this work and they're gonna tell you that they did it and it's gonna be great. But then, like, and then stuff goes bad, you know. Like, you text them and they don't text you back. And, like, I don't, that was.

Where, OK.

So, so we had this situation with the IRS, which was I guess, I guess. So, there are edge cases that we didn't, we didn't prepare for. Like, I didn't prepare for it. I didn't think about it. Where we were just happily just going about our day and we just suddenly, we started getting these emails from HelloFax. I don't know if HelloFax is here. I apologize for, for this. They just kept saying, they were like, are you sure that this fax number is right? And we were just getting flooded with these emails. Like, are you sure this fax number is right, like please check the fax number. We're like, what the hell is going on? Who is, who are we faxing to?

Well, we were faxing to Obama. We were faxing to the IRS. And the government had shut down. And that was, like, we never like, what, come on! Like I didn't know that was going on. So there were like edge cases of things that you can't, it wouldn't have been reasonable for us to build the government shutting down into this system. Like, I, I believe that. I, I don't know. Maybe I'm wrong. Like I don't know. Prepare for the worst. But, you know, then again, if the government shuts down, we're like, well, I think we had a conversation about it once. We were like, well, like, but then, I don't know. Like, fiat currency is dead, so like, first priority is implement bit coin support and then we'll like, then we'll move on from there.

And so, you know, we, you've got to prioritize. You're a startup. You lack in resources. It's a hard life. It's a hard life.

So, we started, we have to manage a lot of this complexity, and especially as size becomes more important, there are a lot of ways that we can kind of go about this. The timing thing is big. I mean, some of these processes, they really do take an hour. And so what do you do? And there are a lot of solutions. You, you know.

I don't, I don't know.

We were rewriting in C. I don't know any C. Honestly, I don't ever plan on learning it. I think that makes me a jerk. But, like, not gonna be Linus and I'm OK with that. I can live with that, and DHH said it was OK. So you guys can't make fun of me.

Hacker News is really big on node these days. I don't, I don't know. That's possible. We could do that. We could go to node. They're also really big on Go. Hacker News is so into Go right now, it's just like, what do we do? I don't know. Like maybe we should just rewrite it in a different language. And so there's things, that like, programmers get so excited. They're like, new problem. All right. New problem. New language. New framework. We're just gonna, what, like monads? I don't even know what that is. I still have no idea what a monad is. But it seemed definitely like the right choice. Definitely right.

So we didn't go with any of those, thankfully. So we found a very, we found that, for us, and for the, the way that we need to solve problems, stick, sticking with things that we knew, like tools that we already knew, sticking with the Rails pattern, like general Rails patterns, was very important. Because in those moments when you get an email that a forty-million dollar transaction failed, you want it to just be automatic. You want to go in there, have everything. That's why, for us, code quality actually matters a lot. Readability matters a lot. Because you want to take away everything that could possibly go wrong.

So step one. Here's how we're gonna solve it. We're gonna break it down. Break it down.

All right. So we have this really big maintenance, and so we just started, we just started cutting them in half. We're gonna have many, many maintenances. We had one problem before, let's have lots of problems. We got PayrollMaintenance, we got CharityMaintenance. We're like giving money to charity, that's cool. We got Email, we got CarMaintenance. That's something I have to do. That's, but, yeah. CarMaintenance was good.

So we split them out into like different, like, conceptual blocks. So group these conceptually similar pieces. Localize the failure. So when something goes down, right, if, if I can't sync with the MailChimp API with like our news letter subscription list, like, OK. That's OK. But, like, don't let that stop somebody getting paid. That's not, like, I don't know. Both are important. Newsletters are important. You should sign up. But, you know, some, some things. We should localize those.

And the problem that we found, some of the cons, the domains are still very large. And I know we can break down into like service objects and we can just go objects on objects on objects and that's, we like it, and it's good. But, like, there's still a point where, like, Payroll. Like, running Payroll. There's a lot of, there are a lot of things that need to happen and conceptually it makes a lot more sense keeping them close together.

We still, also, have this idea of failing in the middle, which is, which is terrifying. It just requires a lot of manual work. And as programmers, we like to get rid of manual work. Like that's, that's our job. So we're just, we're gonna break it down some more.

Look at these steps. Way to go.

All right. So I wrote some code. So we developed this, this library called UltraMarathon, and I'll just kind of glaze over, give you like, a brief overview, cause it's, I don't know. I don't know, but that's fine.

But it, I just wanted to give you a sense of, like, it's a very Rails-y feel. You know, we've got callbacks. We've got, you know, like lambdas and like stabby stuff and like, that's cool. But we're able to create a DSL where we were able to map out dependencies. We were able to have all of these things. Basically conceptually break them out in our mind, which for us was very important. The readability, the being able to tell what failed and where, exactly, it failed, and what other things relied on that was very important.

So you have just like a general lifecycle that's also very Rails-y. Before_run callbacks, and then we'll run it. We have things that might happen on an error. And then once something does fail, we have to be able to reset it, get it back into kind of a happy state and manage the state as we reset it and then do things after it runs.

So this is, that's just kind of like the general lifecycle of these, of these maintenance objects that we created. And then confusingly named UltraMarathon before Marathon was taken and I, I think it's like gem squatting is, is rampant. But if you own that gem I'd love to buy it.

So, this is, this is generally how it works. So we, we broke them down into these, like, running blocks. So these, these are all unrun. Then we run them and things fail as we, as we expect, because we're not very good. But that's OK. Because only part, we have these partial failures. So instead of one thing, basically blocking and just blowing up and now, now everything's gone to hell, and having to like revive that state, we can now run them and have individual pieces succeed and individual pieces fail and their dependencies don't run if they're, if the parent failed.

But, you know, that's OK. We reset them and we're like, oh, OK. So instead of just losing all of the work that we did and tried to figure out how do we not pay people multiple times, which they might like. That could be a feature in the future. But, for now, no.

And then rerun them. They're all green. And that was like the most simplified version of, like, an actual code example. Anyway, you can look it up on GitHub.

So, advantages to this. Definitely instrumentation. And that's, that's really important. And there are, like, it's important for us to be architecturally sound and like conceptually understand what's happening. But it is also, as we grow, needing to instrument stuff. Needing to figure out why does this take half an hour or an hour long. How can we, how can we have this grow ten times as large and take half the time or whatever.

And that may involve, I mean, the technology, as I mentioned earlier, I don't have anything against any of those. It's definitely possible we'll have to rewrite things in C, and definitely on the tax side we do. And we may use other languages and other frameworks. 

And then the quarantined failures was really important for us. And explicit dependencies. There are things that have to happen before others. This gives us a very good kind of mental framework for allowing things to fail and not bringing everything down. And the things that succeed, everything can, it'll run as far as it can. And if things fail, like it'll keep doing the things that it can. But that gives us less manual labor that we have to do. Because again if it runs for an hour and it fails halfway through, we don't want to have to start over because then we have to wait another hour to maybe succeed.

Chapter three. Accepting failure.

It's like something my dad would talk to me about. You know, Chris, we're gonna talk about accepting failure. He's a nice guy. I really like my dad.

Yeah. So this is, this is kind of where we started. We started this, this journey. We, I think we put ourselves under a lot of stress and, and maybe for the right reasons. We deal with a lot of critical stuff. And I don't mean that in like an arrogant, well, oh, we're doing all this cool stuff. I mean it in like, the things that happen were we to fail are pretty bad. And they're pretty bad, like, not just for us. Like, I'm OK if I screw up and like, like I don't know. Like I break some tests or whatever. I'm OK with that.

But some of the stakes, like, if people might not get paid. And that's, people not getting paid on time, for us, is a really big deal. People might miss rent. That terrifies me. Like, the idea that somebody would miss rent or would have to take out a loan. If you know anything about, they're like short term payroll loans, and it's absolutely, it's a revolting business. They charge like twenty or thirty percent interest on. People who have like already earned their money but like don't have it right now because, and so they'll just charge them absurd amounts of money. So like, if we put somebody in that situation, that's terrible.

So, we, we started from it weird, like, this is so serious. We're dealing with huge volumes of money that, that is not ours. We're dealing with other peoples' lives. We're dealing with, like, if the IRS comes back and is like, you didn't submit this payment and they send that, they'll send notices to these small business owners, and like, you're a three-person like flower shop and you get this thing from the IRS that's like, you owe us money and like, you're gonna be fined. I think, like, some of their fines are like ten x whatever you, whatever you missed. Like that's really scary. And like, we don't.

Part of our role is to mask all of that complexity, to like, make, make, make it happy. Make it, you know, butterflies and payroll and stuff. You know, this is it.

So we took a very serious approach to, like, failure is not an option. We cannot fail. We can never go down. And we started out with, kind of believing that that was the number one priority that we never failed. And I think that was, I think that was not right. And it took us awhile to kind of figure that out. That, like, maybe that's, maybe that's not the direction that we should go in. Because, ultimately, to say that failure is not an option is not actually, itself, an option.

I mean, we're people. Like, we build software. That's what we do. But we're, we are ourselves flawed. And we're gonna write bugs. And like, the IRS is gonna go down. Like, you can't rely on everything always being happy. And so believing that that is going to be the state of the world, when trying to prepare for every single error case was not, was not realistic. Especially as, as things grow, as they tend to.

I'm gonna look at some quotes. That's good.

"You're afraid of making mistakes. Don't be. Mistakes can be profited by. Man, when I was young I shoved my ignorance in peoples' faces. They beat me with sticks."

That seems like a weird reaction, like.

"By the time I was forty, my blunt instrument had been honed to a fine cutting point for me. If you hide your ignorance, no one will ever hit you and you'll never learn."

Ray Bradbury. It's, I think this is, I don't know what book this is. Fahrenheit 451, I think.

I really like this. And it took us awhile to get to this point, where it's like, failure is OK. Failure is something, and this is less about this particular case, less about, like, programming in general. But I think we have, like, this is definitely a thing, like in society. Like, we don't like to fail. We like objective measures of success. Of, like, we like money. We deal with money all the time, but I, we like to view ourselves as like, we have grades or we have, like, test coverage. We have all these things that say, like, I am successful. And then we don't want to fail. Which is good. Like, I think we should continue to push ourselves. But the failures are often the times where we learn the most about the area that we're in.

Definitely in payroll. Like, our failures have taught us more about how to build this system than if we had been extraordinarily slow and careful and just never allowed ourselves to make any mistakes. Because, ultimately, the mistakes were gonna happen anyway. And so you could view it from a sense of, oh my god, this happened. Everything's on fire. Like I have to make sure that this doesn't blow up. But, like, if that's gonna happen anyway, the learning from it is far more valuable. You're gonna get far more out of it.

I think there's also this, this misconception that there are people who don't fail.

"Good people are not those who lack flaws, the brave are not those who feel no fear, and the generous are not those who never feel selfish.

Extraordinary people are not extraordinary because they are invulnerable to unconscious biases. They are extraordinary because they choose to do something about it."

I think the, the unconscious biases, like, you can substitute that for anything. I, I've seen this a lot, especially in programming. Like, dealing with failure. Like, we see people, working as ever, just being here. Like, you see, like Yehuda gives a talk. Like, DHH gives a talk. Or, like, Tenderlove gives a, gives a talk. You're like, wow, like these are people that I really respect. Like, I see them go out and write code and then I look at myself and, like, I just committed something with a syntax error. I'm like, eh. Like, maybe I'm not, maybe I'm not gonna be that person. Maybe I'm not... maybe I can't do that.

And I think that was, that was really hard. Like, especially when you start working in a business. Like, it's a personal struggle, definitely, to accept these kinds of failures. And, when you work with other people, it's even more of a, of a struggle, because you're like, now I have these people that are relying on me. Now I have people who, literally, their livelihood relies on me not fucking up. And that's terrifying.

But, I think to hold yourself to that idea, that we're never gonna fail, is itself a recipe for failure. Like, those, like, Tenderlove, like I'm sure the number of times that he's made mistakes are, like, unbelievable. Uncountable. I won't speak, maybe he's never made. I don't know. I don't know.

But I think, like, it's very strange, to me, I think, we have this thing called Imposter Syndrome. Which is like, I've only ever heard of it in, investment banking, actually, I've heard of it. And here. Which is weird, because they're like completely different things, right. Like, investment banking is, like, all about money. Like, we're just gonna, whoever, like, we'll bring down the economy, maybe by accident. And, like, I don't know anything about finances. Don't listen to me on this stuff.

But, like, completely different motivations. Like, those are completely different people. Like, they wear suits, and that's terrifying. And like, they have really nice hair, which is, like, I'm jealous. But, like, they have, like, they're completely different people, but also have those kinds of insecurities. And I think we definitely have that. Like, even, some of the best people that I've spoken to, some of, like, these programmers that I respect more than anything, and they'll say, like, I'm, I just feel like I'm not good enough to be where I am. Like, I feel like I don't deserve it. Like, people ask me to talk or people, like, people will hire me for jobs. People will give me respect and I don't deserve it.

And I think part of it is this idea that, part of it is that we work with computers, which never make any mistakes. I mean, in general. They, you know, they do things only that you tell them to do. And they empower you to make mistakes on a far broader scale than you could ever make by yourself, alone. Which is good. That's fun.

But I think, I, I think this is really interesting. So I was wondering, when I, so I submitted this proposal, and I, some people asked me, like, oh, so you submitted to Rails Conf. What are you talking about? And I was like, error recovery and long-running processes.

And they're like, oh. Cool. 

And I was like, yeah, I don't know. I'm like, really jazzed about this. But, like, I don't really know why. And I keep telling people I do. Like, when I, I talk to people, and like, if you've ever been in a bar, and be like, somebody's like, oh, what do you do? And I'm like, I work in a, in a payroll company. And they're like, oh. I'm sorry.

Like, no, I love it. Like, it's so exciting. Like, you get to like do, like, you can empower people to do whatever the hell they want with their money. If they want to donate. Like, you can impact billions of dollars. Like really, really jazzy stuff.

But I think, with this, and it took me a long time to figure out and actually, like, the talk was already accepted and I still hadn't figured out why I wanted to do it, which was a problem. Definitely a problem yesterday. I didn't finish this yesterday.

But I couldn't figure it out. And then it, I was actually talking with my dad, and I figured it out, and it was, it was this. It was failure. Like, this. I think if you take away anything from this, and you can look at the code and there are a lot of, like, the libraries that we wrote, and I love to talk about the, the technological problems that we're solving. But I think the failure piece, for me, was really what I found attractive. This shift in philosophy that we needed to have. It was healthy for us to accept that we are going to fail, even though we're doing very critical things. Even though we have peoples' livelihoods in our hand. To assume that just because we would like to not fail that we are not going to fail, ultimately just caused us to have a lot of stress, and every time something did go wrong we were like, oh my god, oh my god. This can't happen. Everything's on fire. Everything's fucked.

But that's not, ultimately, better for our users. It's not better for our own sanity and our health and our loved ones and the people we interact with every day. So I don't know. I, I think if you take anything from this, it would be to fail more. So if your company's paying for you to be here, don't tell them that I told you that, cause it's probably, it's probably, I don't even know if my company knows that I'm gonna say that, but. That's OK.

So, if you want to learn more, it's on the GitHub dot com. broken_record is a system that we use to validate all of our models. There are a lot more things around that, around threading, around performance, cause there's obviously many more considerations that you have to have when doing that. ultra_marathon is a system that we use, that's open source, and we're still actively working on. I mean we, I can't say that we've solved this problem, but we will continue to work on it. But to run a lot of these really big jobs, to allow things to fail, to allow things to be able to recover them and roll them back and like get things into a happier state. And then performance is something that we'll definitely work on there.

Yeah. So that's, yeah. So if you want to learn more, definitely check it out, and definitely, you don't have to just think about the philosophy, because, don't worry, I, I stay up late doing that, which is fine.

So yeah. I guess we have time for questions. I don't, if you have questions about anything, coding or not coding related, I'm happy to talk about anything.

Anything else? All right. Thank you.
