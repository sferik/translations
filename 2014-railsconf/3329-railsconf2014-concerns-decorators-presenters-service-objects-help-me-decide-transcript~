RailsConf 2014 - Concerns, Decorators, Presenters, Service Objects, Helpers, Help Me Decide! - Justin Gordon

JUSTIN GORDON: Is there, can you guys hear me OK? OK. I didn't realize no one, no one's giving the clue, like, we're starting. So I got, I got thirty-eight minutes to go.

Hi. I'm Justin Gordon. I flew out here from Maoi. My handle on Twitter is @railsonmaoi. I'm a Rails freelancer. I'm a poster child for remote work. The, the guys at 37Signals. I do that all the time. Work on Google Hangouts. Everything.

Anyway. I am so stoked to be here. I'm thrilled. My talk today is called Concerns, Decorators, Presenters, Serive Objects, Helpers, Help Me Decide! Well, after I saw David's talk this morning, I realized that wasn't a very good title. OK. Here's my new title. How to Lose Model and Controller Fast for Men and Women.

The ball of mud. How many of you experienced, ever experienced that in a Rails project? Well, look, I only learned Rails three years ago. I understand how this goes, because it's a little bit mysterious when you first start programming in Ruby. You know, the natural place to put - where's the natural place to put another line of code? In the same place, next to where you need to change something. So it just kind of keeps growing and growing and growing.

Anyway. So I love this analogy. The ball of mud. If any of you have kids, like, I have a wonderful five-year-old, almost six. They don't like to clean themselves. So you try not to get them too dirty. But they like to play. And, anyway. I guarantee you, this guy is not cleaning up his mess. And you could have the same analogy, a little bit, with some software projects, too.

K. When I first wanted to develop this talk, what I wanted to do was I wanted to make it so that I was gonna get some real code. So I started asking around the forums. By the way, a big shoutout to the Parlay forum and Thoughtbot forums. I'm on there all the time.

So, the Sandi rules. Hang on a second.

So, how many of you all heard about the Sandi Metz rules, been following that stuff? You know, that sort of stuff. I've been doing that a lot recently. And that's kind of a lot of what got me going, started going for this talk. So, anyway, I wanted to bring up some real code here. So here we got some code from RedMine, and we got a user model there. Yeah. 762 lines. We got the count controller. The lost password method. Yeah, fifty, what have we got? Fifty-two lines. Four levels of nesting. Yeah. That's still really not that much fun to work on.

Anyway. So, how do we orga- so, anyway, so I'm gonna be doing is, I got, I come up with some examples that are much simpler, really. That was gonna be too hard. So my examples are built on top of Michael Hartl's Rails Tutorial. Actually, I want to just, I'm gonna take on sec right now, just tell you a little bit about how I came about developing the talk. Cause I think it's really, really relevant.

First of all, I go, I wasn't even planning on giving a talk. I got brought out here by, by Ru, by JetBrains at RubyMine. They say, go do a RailsConf for us. I'm just gonna go do, I said, I'm not sure if I can go. I say, yeah, OK, I'll go. Then I see a little Twitter thing, OK. So, last day for conference approach. And I'd been working on kind of applying these patterns to a big project I've been doing. The patterns I'm about to show you.

And, so then I thought, OK, you know what? What they don't really teach you that much about is when to apply a pattern to a particular thing. And I've got all these, like, cool little different patterns. So that was kind of the concept of, of this talk. And this is an example we're gonna try to fix.

So what we got here is, how we organize this mess, and an example I got is like a clothing store. You go to a clothing store, and what if they organize the clothing in the clothing store by color? Say, everything that's black is gonna be, everything that's black is gonna be in like all one place. That would be a disaster. You know, you'd have women's clothes, baby's clothes, everything, and maybe you're looking for something, for men's clothes, you know, and size and whatever.

Even among different kinds of clothing stores, those organizational patterns are different, and you can use this analogy by, you know, if you were doing struts versus if you're doing Rails. Hey, it's gonna look totally different.

So, look. Like, fashion, you know. Peoples' ideas of what is good style will be different. We saw, this morning, David's talk, is like, clearly, he's not in the same camp as some other people about what this is. You see, we've got on the left here, business suits, and on the right, we have hoodie, hoodie pro, or dress-up hoodie, I think it's called.

OK. What's our style? Our style is Rails. OK. That is gonna be one of the kind of primary topics about what the talk is, because it is not gonna be about some computer science, like this is the best way. We're gonna abstract everything out.

The thing I love about Rails that made it just so amazingly productive is the whole ecosystem. The whole community. And part of what that is, it's that you can go online and find the answer to just about any question on Rails so easily. So, a big part about what this talk is, or like how the patterns evaluate is, is, is this pattern fit into Rails as it is? Now, a big part of that is, who we saw speak earlier, David.

So, lo and behold, now that I. So I put my code up on GitHub. I, and this is how I developed my talk. All of this code is on GitHub. So you can go there and it was developed, and I put in a pull request for each of the patterns I'm gonna show you. I'm gonna do my code samples at the end, because when I test this out, it was too painful for you to watch me kind of fat finger something. I've got too much material to cover. So as much time as I have, I'm gonna go through the samples.

But it's all there on GitHub. And, even better than just having code samples there, it's got review content, comments from guys like James Edward Gray. So I go, OK, that's kind of cool. I chatted with Dave a little bit before I emailed him. Lo and behold, he sends me back a response almost immediately, started giving me code reviews. Whoa. This is kind of cool. Code review from, yeah, I haven't met David before. Code review from David.

So, anyway, but needless to say, his code, and so I was kind of like the power child this morning for even talking about some of these patterns that, you know, you do this, now you have clean code. So, I was the guy, and got a little bit humbled by the experience.

And, so we're gonna see the, the benefits of all this interaction. So it's kind of like this topic, this talk was developed through open source, which is just something that just didn't happen five, ten years ago.

OK. So here's a, here's kind of the summary of where we're gonna go in this talk. So I'm kind of talking to him, and this is, these are exact quotes. Like, I was permissed to use this. This is starting to boil down to the framework, to the framework capabilities and moving beyond only when it's necessary.

OK, when you really use an extension, keep it simple. When you use a framework code for wht it's intended, you're not cutting against the grain. And that's the key point. So that's what we're gonna, I'm gonna be showing you stuff with that in mind.

The example I'm gonna give you is, just to give you a context of the example later on, it's a micropost example, and, let me show you, just really quickly. Cause this is kind of fun.

You know what, I'm gonna show the example at the end, because it wants, it doesn't want me to quit out presentation mode.

OK. So anyway. When I gave this talk before, one of the things someone got confused about was they didn't understand what the examples were about. So it's a little, like, microblogging application, like Twitter. I'm gonna extend it, and I'll show you later on, based on having a five-year-old, how I would extend it for little kids. Who should not be using profanity. Or the word poop.

So everything's there. OK. So this is the, this is the structure of the talk. Kind of where we're gonna go. So when we're gonna be evaluating code, what we want to do is we want to, like, how are you gonna say, like, what's better or what's not? Well, if you're gonna have a discussion with somebody, before you even discuss, is this better or not? Let's discuss what we both can agree on, which are gonna be the guidelines. So I'm giving you my guidelines for evaluating stuff, and the objectives, and then we'll go to the patterns and techniques.

So, small methods, less than five lines. We no longer care about how long it takes like to invoke a method in Ruby. That was, if you've been programming for many years, we used to be concerned about that. Small classes. That's huge. Actually, and I kind of extend that. Even small files. And the reason why is, like, who wants to scroll through a thousand-line file looking for something? I'd much rather have stuff broken up into manageable, easy-to-use chunks.

One instance variable in a view. There's another thing. It's like, no, it's a real pain if you've got, like, ten different variables all being set up in all different places being sent into a view. So that makes it easy.

So, objectives. DRY. Everyone knows, should know what that is. Easy to test and, well, after this morning's talk, you know, relatively easy to test. Clarity. Easy to read. Easy to find. And easy to change.

So the patterns I'm gonna talk about. Concerns. Draper decorators. I use the word draper decorators and not just decorators, because I'm specifically referring just to using the Draper gem, which I like. And decorators, and the next term, presenters have lots of different meanings.

So, for presenters, that's gonna be my own little pattern. And split up controllers. I'm not gonna talk about that. It's in the pull-request. And then move logic to models is one of the topics we're gonna be talking about, and validation classes. That'll be in the pull request.

I'm missing one of the main topics here that you probably all came to hear about. Or maybe some of you. There's no service objects there.

Well, OK, you'll see shortly, service objects were originally part of it, but after having some discussions with David, they're not quite there. The pull request is still there. You can still see the code that was originally developed, and you'll see what the responses are.

OK. So first scenario. So you got a huge model and even larger spec, so you want to break up the model spec. How you gonna do this? We're gonna use concerns.

And, specifically, we'll try to break it up using domains. I'll tell you what that means in a sec. I'll tell you, when I first started using concerns, a real big model file, and so how did I get, and so, what was, like, the first easy thing to do? I saw the example that David originally gave taggable. Well, I kind of looked at mine. I got like pages and pages of finger methods that are just, you know, so I don't have, you know, like, my queries all over my controllers.

Choom. Chunk that into a concern. I called it finger_methods was the concern. Then I created one for validation methods. Anyway, David totally hated that. He goes, you break stuff up, we're gonna break stuff up by domains.

So here's a visual representation of, kind of, how you use concerns. Say you have class, a big, big file. You got, you need to know, you need to understand, your class macros are things like belong, has_many, validates, et cetera. You got your instance method. You got your class methods.

Now, so, what you're gonna do is you're gonna break out this stuff by domains. So you want to figure out what they are, and then what's gonna happen is is that you just literally cut and paste. This is the easiest refactoring. You literally, if your tests were good, you don't need to add anymore test.

So, I'm gonna, when I get to the code examples, I'll give you a quick. I'll show you that. So concerns, how?

So how do you do this? So discover the problem, you know, what's the domain. We're gonna, all you gotta do is create a concern module with the extend ActiveSupport concern, and then you're gonna move code into the concern. And then you're gonna break out tests, when  you, another thing I really liked doing was, when I had this big user model and then I had this even bigger user spec test, what it did was then I had, and this is my original core example, was I had my finder methods and then I had my user directory and then I had my finger_methods_spec.

So, nice chunks.

OK. So, this is what, a direct quote from David. In a sea of 60 methods, there will always be domain-based groupings rather than technical gorupings. Never seen that not to be the case."

At first, I didn't get this whole thing with, like, domain-based groupings. So the example I'm gonna be showing you is called emailable, which is just some properties, like, the email is always stored in lower-case. When I search for it, I always want to convert the search-query in the lower-case. That makes a nice little domain, just like his example, taggable.

So the next one I'm gonna be going through in the code is draper decorators. So, in draper decorators, is, the example, so like a good example for this is you have a model file creating detailed validation messages with html and url links. OK.

So this was one thing, and I still actually find this kind of confusing. How many people ever actually end up with a situation where you need a validation message and you need to display a url where someone clicks on it to fix the problem? Or you want to put, like, some word in bold. You know, that is actually view-based. Presentation-based logic. But you're supposed to be creating it in the model.

And then what happens is, is then you end up needing to call something like the url helpers from your model. Now, for a beginner Rails programmer, how confusing is that? Very confusing, cause, like, whoa. I was just doing that in my views and my controller is no problem.

Anyway. Basically what this is, what the draper decorators will allow you to do is any of this stuff, you're gonna be able to move into this decorator class, because it just makes, like, basically, like, imagine concerns, but going the next step for your presentation stuff for your model.

So here's, like, kind of what you got here. You got presentation code. You got model. And the next thing that would, we're gonna do with decorators is we are going to break it out, so we got the decorators. And they are basically gonna be covering the overlap between, say, the model and the presentation layer.

So just like I said. Think about, like, kind of like a concern, but if you were making a concern for just your presentation stuff, it's easier to do it with the draper decorator gem. Yeah, you could do it with concerns.

OK. So, alternatives to using the draper decorator if you're doing this. You can make view helpers. You can just make plain-old Ruby objects, and you've gotta pass the context into them. So the example I'm gonna be giving is a piece of duplicated code and, and I'll show you this once I get to the code.

K. The presenter.

So, presenters. That's the next one. So this is a pattern. This is very hard to come up with the name for this one. And the reason why is that presenter and decorator are confusing because they have different meanings in the like Gang of Four books, et cetera. So it just means different things to different people.

So I asked around, and David gave me a thumbs up on the word presenter for this pattern. Some other people. So that's what it is. So what's the scenario? You're seeing like too many instance variables in a controller action, and you've got all these variables, instanve variables accessed in your view. And then you might have a bunch of logic in the view code. And it's just better not to have too much code, Ruby code in your view code.

So what this is gonna do, it's, so what we're gonna do is we're gonna create a plain-old Ruby object. And what we're gonna do is we're gonna pass, pass the stuff we need to in this Ruby objet, and that Ruby object is gonna be accessed from the code. I'm gonna be showing you this patterna  little bit later. I'm gonna get into the code.

So just imagine, though, just all those declarations for those instances variables, we're gonna put all, whatever information we need to create that, we're gonna put that in the parameters for initializing this, this new object. And that's what I'm calling the presenter. And then the review code will access a presenter dot, dot micropost. Presenter dot something.

Another great example of how these presenters really help out is when you're using fragment caching. Fragment caching is awesome, if you haven't tried it. One of the things that happens when you're using fragment caching is you go and look at your log, you look at your log and say, did this query run? Cause it may be on a slow query.

And before, if you were declaring these instance variables in your controller action, what happens? You ran the query, but then you get to  your view and you got the cache block. And then, OK, the cache block didn't run. But you still ran the query. So by putting stuff in this presenter object, then what happens is, is then you access that, that value. You access it from the view code, and you can memoize very easily in this class.

So it ends up looking like, is this. So you have stuff in there, like, this is a message declaration for foobar. Foobar or equals calculate_foobar, and this gets called from the view. So it works perfectly with caching.

So this is what it looks like. You've got a big controller action, many instance variables, and then you have a view with many instance variables. And, just as explained to you, we're gonna make a smaller controller action and we're going to only intialize the presenter instance. No other local, no other instance variables. Then what's gonna happen is is that the, the view will only have, use that one instance variable, and will call into the presenter object.

The next one we're gonna talk about is moving logic to models and the validation classes.

K.
